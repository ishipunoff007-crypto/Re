// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Google Apps Script
const GOOGLE_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbyZCRB99XVjp0v2HdbirOuOMPw_bWGUdtPymo3xBb-OOvzdHLnemHeW-CEkzEuTlswB/exec";

const STATUS_URL = "https://raw.githubusercontent.com/ishipunoff007-crypto/Re/main/booking-status.json";

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const form = document.getElementById('bookingForm');
const phoneInput = document.getElementById('phone');
const successMessage = document.getElementById('successMessage');
const globalError = document.getElementById('globalError');
const submitButton = document.getElementById('submitBtn');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let currentMonth = new Date().getMonth();
let currentYear = new Date().getFullYear();
let selectedDate = null;
let isSubmitting = false;
let bookingStatus = { bookingActive: true, message: '' }; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', async function() {
    await checkBookingStatus();
    initializeCalendar();
    setupEventListeners();
    updateSubmitButton();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –∏–∑ GitHub
async function checkBookingStatus() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏...');
        const response = await fetch(STATUS_URL + '?t=' + Date.now()); // –î–æ–±–∞–≤–ª—è–µ–º timestamp —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        bookingStatus = data;
        console.log('üìä –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏:', bookingStatus.bookingActive ? '–ê–ö–¢–ò–í–ù–ê' : '–ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù–ê');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
        bookingStatus = { bookingActive: true, message: '–ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' };
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function initializeCalendar() {
    updateMonthNavigation();
    renderCalendar();
    setupCalendarNavigation();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
function setupCalendarNavigation() {
    document.getElementById('prevMonthBtn').addEventListener('click', function() {
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        updateMonthNavigation();
        renderCalendar();
        clearDateSelection();
    });

    document.getElementById('nextMonthBtn').addEventListener('click', function() {
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        updateMonthNavigation();
        renderCalendar();
        clearDateSelection();
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
function updateMonthNavigation() {
    const prevBtn = document.getElementById('prevMonthBtn');
    const nextBtn = document.getElementById('nextMonthBtn');
    const monthDisplay = document.getElementById('monthDisplay');
    
    const currentDate = new Date();
    const fourWeeksLater = new Date();
    fourWeeksLater.setDate(currentDate.getDate() + 28);
    
    const viewingDate = new Date(currentYear, currentMonth, 1);
    
    prevBtn.disabled = viewingDate <= currentDate;
    nextBtn.disabled = viewingDate >= fourWeeksLater;
    
    const monthNames = [
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];
    
    monthDisplay.textContent = `${monthNames[currentMonth]} ${currentYear}`;
}

// –†–µ–Ω–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function renderCalendar() {
    const calendarGrid = document.getElementById('calendarGrid');
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const firstDay = new Date(currentYear, currentMonth, 1);
    const lastDay = new Date(currentYear, currentMonth + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(firstDay.getDate() - firstDay.getDay() + (firstDay.getDay() === 0 ? -6 : 1));
    
    calendarGrid.innerHTML = '';
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 42 –¥–Ω—è (6 –Ω–µ–¥–µ–ª—å)
    for (let i = 0; i < 42; i++) {
        const date = new Date(startDate);
        date.setDate(startDate.getDate() + i);
        
        const dayElement = createDayElement(date, today);
        calendarGrid.appendChild(dayElement);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–Ω—è
function createDayElement(date, today) {
    const dayElement = document.createElement('button');
    dayElement.className = 'calendar-day';
    dayElement.type = 'button';
    
    const isCurrentMonth = date.getMonth() === currentMonth;
    const isPast = date < today;
    const isWeekend = date.getDay() === 0 || date.getDay() === 6;
    const isFourWeeksLimit = isWithinFourWeeks(date);
    
    // –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    if (isCurrentMonth) {
        dayElement.classList.add('available');
    } else {
        dayElement.classList.add('unavailable');
    }
    
    if (isPast) dayElement.classList.add('past');
    if (isWeekend) dayElement.classList.add('weekend');
    if (!isFourWeeksLimit) dayElement.classList.add('unavailable');
    
    // –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ
    dayElement.innerHTML = `<div class="day-number">${date.getDate()}</div>`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
    if (isCurrentMonth && !isPast && isFourWeeksLimit) {
        dayElement.addEventListener('click', function() {
            selectDate(date, dayElement);
        });
    } else {
        dayElement.disabled = true;
    }
    
    return dayElement;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 4 –Ω–µ–¥–µ–ª—å
function isWithinFourWeeks(date) {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const fourWeeksLater = new Date(today);
    fourWeeksLater.setDate(today.getDate() + 28);
    
    return date >= today && date <= fourWeeksLater;
}

// –í—ã–±–æ—Ä –¥–∞—Ç—ã
function selectDate(date, element) {
    document.querySelectorAll('.calendar-day').forEach(el => {
        el.classList.remove('selected');
    });
    
    element.classList.add('selected');
    selectedDate = date;
    
    // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –¥–∞—Ç—ã –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let dateInput = document.getElementById('selectedDate');
    if (!dateInput) {
        dateInput = document.createElement('input');
        dateInput.type = 'hidden';
        dateInput.id = 'selectedDate';
        dateInput.name = 'selectedDate';
        form.appendChild(dateInput);
    }
    dateInput.value = formatDateForStorage(date);
    
    hideError(null, 'dateError');
    updateSubmitButton();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    showSelectedDateInfo(date);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
function showSelectedDateInfo(date) {
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    let dateInfoElement = document.getElementById('selectedDateInfo');
    if (!dateInfoElement) {
        dateInfoElement = document.createElement('div');
        dateInfoElement.id = 'selectedDateInfo';
        dateInfoElement.className = 'selected-date-info';
        document.querySelector('.calendar-container').appendChild(dateInfoElement);
    }
    
    const dateString = date.toLocaleDateString('ru-RU', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
    
    dateInfoElement.innerHTML = `
        <div style="background: #e8f5e8; padding: 10px; border-radius: 5px; margin-top: 10px; text-align: center;">
            <strong>‚úì –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:</strong> ${dateString}
        </div>
    `;
}

// –û—á–∏—Å—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
function clearDateSelection() {
    selectedDate = null;
    
    const dateInput = document.getElementById('selectedDate');
    if (dateInput) {
        dateInput.value = '';
    }
    
    document.querySelectorAll('.calendar-day').forEach(el => {
        el.classList.remove('selected');
    });
    
    const dateInfoElement = document.getElementById('selectedDateInfo');
    if (dateInfoElement) {
        dateInfoElement.remove();
    }
    
    updateSubmitButton();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
    if (!bookingStatus.bookingActive) {
        document.getElementById('bookingDisabledMessage').style.display = 'block';
        document.getElementById('pauseMessageText').textContent = bookingStatus.message;
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É
        const formElements = form.querySelectorAll('input, select, textarea, button');
        formElements.forEach(element => {
            element.disabled = true;
            element.style.opacity = '0.6';
        });
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        document.querySelectorAll('.calendar-day, .date-nav-btn').forEach(element => {
            element.disabled = true;
        });
        
        // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É
        submitButton.innerHTML = '–ó–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
        submitButton.style.background = 'var(--gray-medium)';
        
        return; // –ù–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    }

    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–∞ - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    phoneInput.addEventListener('input', function(e) {
        let value = e.target.value.replace(/\D/g, '');
        if (value.startsWith('7') || value.startsWith('8')) {
            value = value.substring(1);
        }
        let formattedValue = '+7';
        if (value.length > 0) formattedValue += ' (' + value.substring(0, 3);
        if (value.length > 3) formattedValue += ') ' + value.substring(3, 6);
        if (value.length > 6) formattedValue += '-' + value.substring(6, 8);
        if (value.length > 8) formattedValue += '-' + value.substring(8, 10);
        e.target.value = formattedValue;
        updateSubmitButton();
    });

    form.addEventListener('submit', function(e) {
        e.preventDefault();
        if (!validateForm()) {
            scrollToFirstError();
            return;
        }
        submitForm();
    });

    form.querySelectorAll('input, select, textarea').forEach(element => {
        element.addEventListener('input', function() {
            validateField(this);
            updateSubmitButton();
        });
        element.addEventListener('blur', function() {
            validateField(this);
            updateSubmitButton();
        });
    });

    document.getElementById('agree').addEventListener('change', function() {
        validateField(this);
        updateSubmitButton();
    });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
function validateField(field) {
    const fieldId = field.id;
    
    switch (fieldId) {
        case 'name':
            if (!field.value.trim()) {
                showError(field, 'nameError');
            } else {
                hideError(field, 'nameError');
            }
            break;
            
        case 'phone':
            const phoneDigits = field.value.replace(/\D/g,'');
            if (phoneDigits.length !== 11) {
                showError(field, 'phoneError');
            } else {
                hideError(field, 'phoneError');
            }
            break;
            
        case 'service':
            if (!field.value) {
                showError(field, 'serviceError');
            } else {
                hideError(field, 'serviceError');
            }
            break;
            
        case 'carModel':
            if (!field.value.trim()) {
                showError(field, 'carModelError');
            } else {
                hideError(field, 'carModelError');
            }
            break;
            
        case 'agree':
            if (!field.checked) {
                document.getElementById('agreeError').style.display = 'block';
            } else {
                document.getElementById('agreeError').style.display = 'none';
            }
            break;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
function updateSubmitButton() {
    const isFormValid = validateFormSilent();
    submitButton.disabled = !isFormValid || isSubmitting;
}

// –¢–∏—Ö–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–æ–∫
function validateFormSilent() {
    const name = document.getElementById('name').value.trim();
    const phone = phoneInput.value.replace(/\D/g, '');
    const service = document.getElementById('service').value;
    const carModel = document.getElementById('carModel').value.trim();
    const agree = document.getElementById('agree').checked;
    
    return name && 
           phone.length === 11 && 
           service && 
           carModel && 
           agree && 
           selectedDate;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
function validateForm() {
    let isValid = true;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
    validateField(document.getElementById('name'));
    validateField(document.getElementById('phone'));
    validateField(document.getElementById('service'));
    validateField(document.getElementById('carModel'));
    validateField(document.getElementById('agree'));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
    if (document.querySelector('.field-error[style*="display: block"]')) {
        isValid = false;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    if (!selectedDate) {
        document.getElementById('dateError').style.display = 'block';
        isValid = false;
    } else {
        document.getElementById('dateError').style.display = 'none';
    }

    return isValid;
}

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
function scrollToFirstError() {
    const firstError = document.querySelector('.field-error[style*="display: block"], .error-message[style*="display: block"]');
    if (firstError) {
        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
}

// –û–¢–ü–†–ê–í–ö–ê –§–û–†–ú–´
async function submitForm() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
    if (!bookingStatus.bookingActive) {
        showGlobalError(bookingStatus.message);
        return;
    }
    
    if (isSubmitting) return;
    
    const formData = {
        name: document.getElementById('name').value.trim(),
        phone: phoneInput.value,
        date: document.getElementById('selectedDate').value,
        service: document.getElementById('service').value,
        carModel: document.getElementById('carModel').value.trim(),
        comments: document.getElementById('comments').value.trim(),
        timestamp: new Date().toISOString()
    };

    console.log("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", formData);
    showLoading();
    isSubmitting = true;

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        const result = await sendFormDataUniversal(formData);
        
        if (result.success) {
            console.log("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞! –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.");
            showSuccessMessage(formData);
            resetForm();
        } else {
            throw new Error(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
        showGlobalError(error.message);
    } finally {
        hideLoading();
        isSubmitting = false;
    }
}

// –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î –û–¢–ü–†–ê–í–ö–ò –î–ê–ù–ù–´–•
function sendFormDataUniversal(formData) {
    return new Promise((resolve, reject) => {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const tempForm = document.createElement('form');
        tempForm.method = 'POST';
        tempForm.action = GOOGLE_SCRIPT_URL;
        tempForm.style.display = 'none';
        tempForm.enctype = 'text/plain';
        
        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π iframe –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        const iframe = document.createElement('iframe');
        iframe.name = 'formTarget_' + Date.now();
        iframe.style.display = 'none';
        iframe.sandbox = 'allow-scripts allow-same-origin allow-forms';
        
        tempForm.target = iframe.name;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        const fields = [
            { name: 'name', value: formData.name },
            { name: 'phone', value: formData.phone },
            { name: 'date', value: formData.date },
            { name: 'service', value: formData.service },
            { name: 'carModel', value: formData.carModel },
            { name: 'comments', value: formData.comments },
            { name: 'timestamp', value: formData.timestamp }
        ];
        
        fields.forEach(field => {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = field.name;
            input.value = field.value;
            tempForm.appendChild(input);
        });
        
        document.body.appendChild(iframe);
        document.body.appendChild(tempForm);
        
        console.log('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É...');
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        const timeoutId = setTimeout(() => {
            cleanup();
            console.log('‚úÖ –¢–∞–π–º–∞—É—Ç: —Å—á–∏—Ç–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É—Å–ø–µ—à–Ω–æ–π (–¥–∞–Ω–Ω—ã–µ –æ–±—ã—á–Ω–æ –¥–æ—Ö–æ–¥—è—Ç)');
            resolve({ success: true, data: { result: 'success' } });
        }, 10000);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ iframe
        iframe.onload = function() {
            clearTimeout(timeoutId);
            console.log('‚úÖ iframe –∑–∞–≥—Ä—É–∂–µ–Ω - –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
            cleanup();
            resolve({ success: true, data: { result: 'success' } });
        };
        
        iframe.onerror = function() {
            clearTimeout(timeoutId);
            console.log('‚ö†Ô∏è iframe –æ—à–∏–±–∫–∞, –Ω–æ –¥–∞–Ω–Ω—ã–µ –º–æ–≥–ª–∏ —É–π—Ç–∏');
            cleanup();
            // –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, —Ç–∞–∫ –∫–∞–∫ —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
            resolve({ success: true, data: { result: 'success' } });
        };
        
        function cleanup() {
            if (document.body.contains(tempForm)) {
                document.body.removeChild(tempForm);
            }
            if (document.body.contains(iframe)) {
                document.body.removeChild(iframe);
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        tempForm.submit();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Beacon API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if (navigator.sendBeacon) {
            try {
                const blob = new Blob([JSON.stringify(formData)], { type: 'text/plain;charset=utf-8' });
                navigator.sendBeacon(GOOGLE_SCRIPT_URL, blob);
                console.log('üì® –î—É–±–ª–∏—Ä—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Beacon API');
            } catch (beaconError) {
                console.log('‚ö†Ô∏è Beacon API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', beaconError);
            }
        }
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
function showSuccessMessage(formData) {
    successMessage.style.display = 'block';
    successMessage.scrollIntoView({ behavior: 'smooth' });
    
    const messageText = document.getElementById('successMessageText');
    const dateString = selectedDate.toLocaleDateString('ru-RU', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
    
    messageText.textContent = `–°–ø–∞—Å–∏–±–æ, ${formData.name}! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ ${dateString} –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`;
    
    setTimeout(() => {
        successMessage.style.display = 'none';
    }, 8000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
function showGlobalError(message) {
    const errorText = document.getElementById('errorMessageText');
    errorText.textContent = message;
    globalError.style.display = 'block';
    globalError.scrollIntoView({ behavior: 'smooth' });
    
    setTimeout(() => {
        globalError.style.display = 'none';
    }, 5000);
}

// –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
function resetForm() {
    form.reset();
    clearDateSelection();
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏
    document.querySelectorAll('.field-error').forEach(error => {
        error.style.display = 'none';
    });
    
    document.querySelectorAll('.form-control.error').forEach(input => {
        input.classList.remove('error');
    });
    
    updateSubmitButton();
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatDateForStorage(date) {
    return date.toISOString().split('T')[0]; // YYYY-MM-DD
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(input, errorId) {
    if (input) input.classList.add('error');
    document.getElementById(errorId).style.display = 'block';
}

// –°–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É
function hideError(input, errorId) {
    if (input) input.classList.remove('error');
    document.getElementById(errorId).style.display = 'none';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
function showLoading() {
    submitButton.disabled = true;
    submitButton.innerHTML = '<span class="btn-loading"><i class="fas fa-spinner fa-spin"></i> –û—Ç–ø—Ä–∞–≤–∫–∞...</span>';
}

// –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
function hideLoading() {
    updateSubmitButton();
    submitButton.innerHTML = '<span class="btn-text">–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</span>';
}







